{
  "version": 3,
  "file": "yarn.js",
  "sourceRoot": "",
  "sources": [
    "../src/yarn.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { task, log } from \"./util/log\"\nimport { homedir } from \"os\"\nimport { spawn, exists } from \"./util/util\"\n\nexport function installDependencies(appDir: string, electronVersion: string, arch: string = process.arch, forceBuildFromSource: boolean, additionalArgs?: any): Promise<any> {\n  return task(`Installing app dependencies for arch ${arch} to ${appDir}`, spawnNpmProduction(appDir, forceBuildFromSource, getGypEnv(electronVersion, arch), additionalArgs))\n}\n\nexport function getGypEnv(electronVersion: string, arch: string): any {\n  const gypHome = path.join(homedir(), \".electron-gyp\")\n  return Object.assign({}, process.env, {\n    npm_config_disturl: \"https://atom.io/download/electron\",\n    npm_config_target: electronVersion,\n    npm_config_runtime: \"electron\",\n    npm_config_arch: arch,\n    HOME: gypHome,\n    USERPROFILE: gypHome,\n  })\n}\n\nfunction spawnNpmProduction(appDir: string, forceBuildFromSource: boolean, env?: any, additionalArgs?: any): Promise<any> {\n  let npmExecPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const npmExecArgs = [\"install\", \"--production\"]\n\n  const isNotYarn = npmExecPath == null || !npmExecPath.includes(\"yarn\")\n  if (isNotYarn) {\n    if (process.env.NPM_NO_BIN_LINKS === \"true\") {\n      npmExecArgs.push(\"--no-bin-links\")\n    }\n    npmExecArgs.push(\"--cache-min\", \"999999999\")\n  }\n\n  if (npmExecPath == null) {\n    npmExecPath = process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n  }\n  else {\n    npmExecArgs.unshift(npmExecPath)\n    npmExecPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n  if (isNotYarn && forceBuildFromSource) {\n    npmExecArgs.push(\"--build-from-source\")\n  }\n\n  if (additionalArgs) {\n    if (Array.isArray(additionalArgs)) {\n      npmExecArgs.push(...additionalArgs)\n    }\n    else {\n      npmExecArgs.push(additionalArgs)\n    }\n  }\n\n  return spawn(npmExecPath, npmExecArgs, {\n    cwd: appDir,\n    env: env || process.env\n  })\n}\n\nlet readInstalled: any = null\nexport function dependencies(dir: string, extraneousOnly: boolean, result: Set<string>): Promise<Array<string>> {\n  if (readInstalled == null) {\n    readInstalled = BluebirdPromise.promisify(require(\"read-installed\"))\n  }\n  return readInstalled(dir)\n    .then((it: any) => flatDependencies(it, result, new Set(), extraneousOnly))\n}\n\nfunction flatDependencies(data: any, result: Set<string>, seen: Set<string>, extraneousOnly: boolean): void {\n  const deps = data.dependencies\n  if (deps == null) {\n    return\n  }\n\n  for (let d of Object.keys(deps)) {\n    const dep = deps[d]\n    if (typeof dep !== \"object\" || (!extraneousOnly && dep.extraneous) || seen.has(dep)) {\n      continue\n    }\n\n    if (extraneousOnly === dep.extraneous) {\n      seen.add(dep)\n      result.add(dep.path)\n    }\n    else {\n      flatDependencies(dep, result, seen, extraneousOnly)\n    }\n  }\n}\n\nexport async function rebuild(appDir: string, electronVersion: string, arch: string = process.arch, additionalArgs: Array<string>) {\n  const deps = new Set<string>()\n  await dependencies(appDir, false, deps)\n  const nativeDeps = await BluebirdPromise.filter(deps, it => exists(path.join(it, \"binding.gyp\")), {concurrency: 8})\n\n  if (nativeDeps.length === 0) {\n    return\n  }\n\n  log(`Rebuilding native app dependencies for arch ${arch} to ${appDir}`)\n\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const execArgs = [\"run\", \"install\", \"--\"]\n\n  if (execPath == null) {\n    if (process.env.FORCE_YARN === \"true\") {\n      execPath = process.platform === \"win32\" ? \"yarn.cmd\" : \"yarn\"\n    }\n    else {\n      execPath = process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n    }\n  }\n  else {\n    execArgs.unshift(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  const gypHome = path.join(homedir(), \".electron-gyp\")\n  const env = Object.assign({}, process.env, {\n    HOME: gypHome,\n    USERPROFILE: gypHome,\n  })\n\n  execArgs.push(\"--disturl=https://atom.io/download/electron\")\n  execArgs.push(`--target=${electronVersion}`)\n  execArgs.push(\"--runtime=electron\")\n  execArgs.push(`--arch=${arch}`)\n  execArgs.push(...additionalArgs)\n\n  for (let dir of nativeDeps) {\n    await spawn(execPath, execArgs, {\n      cwd: dir,\n      env: env\n    })\n  }\n}"
  ]
}

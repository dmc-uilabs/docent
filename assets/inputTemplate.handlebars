{{#if mraOutputs.isRunningInElectron}}{{else}}  <script src='https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js' integrity='sha256-c3RzsUWg+y2XljunEQS0LqWdQ04X1D3j22fd/8JCAKw=' crossorigin='anonymous'></script>  <link href="https://fonts.googleapis.com/css?family=Didact+Gothic|Poppins:700" rel="stylesheet">  <link rel='stylesheet' href='https://dmcmra.s3.amazonaws.com/dev/inputCss.css?AWSAccessKeyId=AKIAJC3XRFBNOJQRODRA&Expires=1529081748&Signature=B7iHhvhSI3i1tzS%2F9L23aCjDDt4%3D'>  <style>    @font-face {      font-family: 'Glyphicons Halflings';      src: url("https://dmcmra.s3.amazonaws.com/dev/glyphicons-halflings-regular.woff2?AWSAccessKeyId=AKIAJC3XRFBNOJQRODRA&Expires=1529081768&Signature=np95fp7Q3j2M9wm7wotUdwugoYQ%3D") format("woff2")    }  </style>{{/if}}<div id="docent" style="position: relative;"><header id="primaryheader"><nav class="navbar navbar-default">  <div class="container">  <div class="topWrap">    <!-- Brand and toggle get grouped for better mobile display -->    <div class="navbar-header">      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">        <span class="sr-only">Toggle navigation</span>      </button>      {{#if mraOutputs.isRunningInElectron}}        <a class="navbar-brand"><img src="../images/docent-logo-f-n-l-1.png" alt="docent" ></a>      {{else}}        <a class="navbar-brand"><img src="https://dmcmra.s3.amazonaws.com/dev/docent-logo-f-n-l-1.svg?AWSAccessKeyId=AKIAJC3XRFBNOJQRODRA&Expires=1529081788&Signature=dbvn6j5xPA30M%2FSELJ%2BnAA%2FjacE%3D" alt="docent" ></a>      {{/if}}    </div>    <!-- Collect the nav links, forms, and other content for toggling -->    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">      <ul class="nav navbar-nav navbar-right hidden-xs">        <li class="dropdown hidden-xs">          <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false" onmouseover="if (typeof(updateActionPersonWithCurrent) == 'function') {updateActionPersonWithCurrent();}">Assessment <span class="caret"></span></a>          <ul class="dropdown-menu">            <li><a href onclick='$("#functionToCall").val("getStartPage")' ng-show='"{{mraOutputs.outputPage}}"!="startPage"' ng-click='run()'>Home</a></li>            <li><a href onclick='$("#functionToCall").val("startPageImportAssessment")' ng-click='run()'>Open</a></li>            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getNextQuestionnairePage")' ng-show='"{{mraOutputs.outputPage}}"!="startPage"' ng-click='run()'>Continue</a></li>            {{#if mraOutputs.isRunningInElectron}}<li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("saveAssessment")' ng-click='run()'>Save</a></li>{{/if}}            {{#if mraOutputs.isRunningInElectron}}            {{else}}            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getExportPage")' ng-click='run()'>Export</a></li>            {{/if}}            <div ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' class="divider"></div>            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getDashboardPage")' ng-click='run()'>Dashboard</a></li>            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getNavigationPage")' ng-click='run()'>Navigate</a></li>            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getReviewPage")' ng-click='run()'>Review</a></li>            <div ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' class="divider"></div>            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getMmpPage")' ng-click='run()'>Action Items</a></li>            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getSkippedPage")' ng-click='run()'>Skipped Questions</a></li>            <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getNotApplicablePage")' ng-click='run()'>N/A Questions</a></li>          </ul>        </li>        <li class="dropdown hidden-xs">          <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Help <span class="caret"></span></a>          <ul class="dropdown-menu">            <li><a href onclick='$("#functionToCall").val("getCriteriaPage")' ng-click='run()'>Criteria</a></li>            <li><a href onclick='$("#functionToCall").val("getDefinitionsPage")' ng-click='run()'>Definitions</a></li>            <li><a href onclick='$("#functionToCall").val("getAcronymsPage")' ng-click='run()'>Acronyms</a></li>            <li><a href onclick='$("#functionToCall").val("getHelpPage")' ng-click='run()'>FAQs</a></li>          </ul>        </li>        </ul>        <ul class="nav navbar-nav visible-xs">                        <li><a href onclick='$("#functionToCall").val("getStartPage")' ng-click='run()'>Home</a></li>                        <li><a href onclick='$("#functionToCall").val("startPageImportAssessment")' ng-click='run()'>Open</a></li>                        {{#if mraOutputs.isRunningInElectron}}                        {{else}}                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getExportPage")' ng-click='run()'>Export</a></li>                        {{/if}}                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getNextQuestionnairePage")' ng-click='run()'>Continue</a></li>                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getDashboardPage")' ng-click='run()'>Dashboard</a></li>                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getNavigationPage")' ng-click='run()'>Navigate</a></li>                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getMmpPage")' ng-click='run()'>Action Items</a></li>                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getSkippedPage")' ng-click='run()'>Skipped Questions</a></li>                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getNotApplicablePage")' ng-click='run()'>N/A Questions</a></li>                        <li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("getReviewPage")' ng-click='run()'>Review</a></li>                        {{#if mraOutputs.isRunningInElectron}}<li><a href ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' onclick='$("#functionToCall").val("saveAssessment")' ng-click='run()'>Save</a></li>{{/if}}                        <li><a href onclick='$("#functionToCall").val("getCriteriaPage")' ng-click='run()'>Criteria</a></li>                        <li><a href onclick='$("#functionToCall").val("getDefinitionsPage")' ng-click='run()'>Definitions</a></li>                        <li><a href onclick='$("#functionToCall").val("getAcronymsPage")' ng-click='run()'>Acronyms</a></li>                        <li><a href onclick='$("#functionToCall").val("getHelpPage")' ng-click='run()'>FAQs</a></li>      </ul>    </div><!-- /.navbar-collapse -->  </div><!-- /.container-fluid -->  </div>  <input type='hidden' id='functionToCall' value='getStartPage'/>  <input type='hidden' id='dmcProjectId' value='\{{projectData.id}}' />  {{#if mraOutputs.outputPage}}    <span ng-if='"{{mraOutputs.outputPage}}"!="startPage"'><input type='hidden' id='inAssessmentPath' value='{{mraOutputs.outAssessmentPath}}'/></span>  {{/if}}</nav></header><div class="container" id="mainContent">    <h2> Start New Assessment</h2>    <p class="instruction">Use this option to start a new assessment.</p>    <form>        <label>Team Members</label>        {{#unless mraOutputs.assessment.teamMembers}}            <div class="memberSection" ng-init='mrl_teamMemberArray=["0"];mrl_numTeamMembers=1'>        {{/unless}}        {{#if mraOutputs.assessment.teamMembers}}            <div class="memberSection" ng-init='mrl_teamMemberArray=[];mrl_numTeamMembers=0'>        {{/if}}        {{#each mraOutputs.assessment.teamMembers}}            <div class="row memberRow">                <div class="col-sm-6">                    <input type="text" class="form-control" id='mrl_teamMemberName{{@index}}' value='{{name}}' />                </div>                <div class="col-sm-5">                    <input type="text" class="form-control" id='mrl_teamMemberRole{{@index}}' value='{{role}}' />                </div>                <div class="col-sm-1">                    <button class="removeButton" style="vertical-align:top;"><span class="glyphicon glyphicon-minus-sign"></span></button>                </div>            </div>        {{/each}}        <div class="row memberRow" ng-repeat='x in mrl_teamMemberArray'>            <div class="col-sm-6">                <input type="text" class="form-control" id='mrl_teamMemberName' placeholder="Member Name" />            </div>            <div class="col-sm-5">                <input type="text" class="form-control" id='mrl_teamMemberRole' placeholder="Member Role" />            </div>            <div class="col-sm-1">                <button style="vertical-align: text-top;" class="removeButton" ng-show='$last'><span ng-click='mrl_teamMemberArray.splice(-1);mrl_numTeamMembers=mrl_numTeamMembers-1' class="glyphicon glyphicon-minus-sign"></span></button>            </div>        </div>        <button class="addButton" ng-click='mrl_teamMemberArray.push(mrl_numTeamMembers);mrl_numTeamMembers=mrl_numTeamMembers+1'><span class="glyphicon glyphicon-plus-sign"></span>Add Team Member</button>        </div>        <div class="row">            <div class="col-sm-6">                <div class="form-group">                    <label>Scope</label>                    <textarea id='scope' autofocus="" class="form-control" placeholder="Enter Scope Here" rows=6 style="height:139px;">{{mraOutputs.assessment.scope}}</textarea>                </div>                <div class="form-group">                    <label>Location</label>                    <input type="text" class="form-control" placeholder="Enter Location" id='location' value='{{mraOutputs.assessment.location}}' />                </div>                {{#unless mraOutputs.isRunningInElectron}}                    <div class='form-group'>                        <label>Name of Assessment:</label>                        <span ng-show='assessmentNameRequired'>{{assessmentNameRequired}}</span>                        <input type='text' class='form-control' id='inAssessmentPath' value='{{mraOutputs.outAssessmentPath}}' {{#if mraOutputs.outAssessmentPath}} readonly {{/if}}></input>                    </div>                {{/unless}}            </div>            <div class="col-sm-6">                <div class="row">                    <div class="form-group col-sm-6">                        <label>Target MRL</label>                        <select class="form-control" id='targetLevel' ng-init='init_level="{{mraOutputs.assessment.targetLevel}}"' ng-model='init_level'>                      <option value=1>1</option>                      <option value=2>2</option>                      <option value=3>3</option>                      <option value=4>4</option>                      <option value=5>5</option>                      <option value=6>6</option>                      <option value=7>7</option>                      <option value=8>8</option>                      <option value=9>9</option>                      <option value=10>10</option>                		</select>                    </div>                    <div class="form-group col-sm-6">                        <label>Level Switching  <a href class="glyphicon glyphicon-question-sign" data-toggle="tooltip" title="When turned on, Docent will present questions above and below your selected level. The goal of this functionality is to find the 'ceiling' or 'floor' of your MRA if you pass or fail your selected level. When turned off, you will only see questions at your selected level."></a></label>                        <select class="form-control" id='levelSwitching' ng-init='level_switching="{{mraOutputs.assessment.levelSwitching}}"' ng-model='level_switching'>                      <option value=1>On</option>                      <option value=0>Off</option>                		</select>                    </div>                </div>                <div class="form-group">                    <label>Date to Achieve Target MRL</label>                    <input type="date" class="form-control" id='targetDate' value='{{mraOutputs.assessment.targetDate}}'>                </div>                <div class="form-group">                    <label>Deskbook Version</label>                    <select class='form-control' id='version'>                        <option title='v2016' value='1' selected='selected'>2016</option>                    </select>                </div>            </div>        </div>        <div class="row">            <div class="col-xs-12" style="padding-bottom: 10px;">                <a class="criteria-controls filter-button collapsed" data-toggle="collapse" data-target="#collapseThreads">Choose Threads                  <a href class="glyphicon glyphicon-question-sign" data-toggle="tooltip" title="You may use the selections here to explicitly include or exclude questions for specific threads in the MRA. If a thread name is unchecked, you will not be presented with any questions for that thread. Typically, all threads will be left checked."></a>                </a>                <input type="hidden" id="chosenThreads"></input>            </div>        </div>        {{#if mraOutputs.threads}}          <div class="row collapse" id="collapseThreads" style="border-top: 1px solid lightgrey; padding-top: 15px; margin: 0px -5px;">              {{#each mraOutputs.threads}}                  <div class="col-sm-4" ng-init="thread{{this.[0]}} = {{this.[3]}}">                      <label><input type="checkbox" ng-model='thread{{this.[0]}}'><a style="color: black;" data-toggle="tooltip" title="{{ this.[2] }}">{{ this.[1] }}</a></label>                  </div>              {{/each}}          </div>        {{else}}          <div class="row collapse" id="collapseThreads" style="border-top: 1px solid lightgrey; padding-top: 15px; margin: 0px -5px;">              <div class="col-sm-4" ng-init="thread1 = true">                <label><input ng-model="thread1" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="">Technology Maturity</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread2 = true">                <label><input ng-model="thread2" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Technology and the Industrial Base: Requires an analysis of the capability of the national technology and industrial base to support the design, development, production, operation, uninterrupted maintenance support of the system and eventual disposal (environmental impacts).&lt;br&gt;Technology and the Industrial Base includes industrial base issues and manufacturing technology development.">Technology &amp; Industrial Base</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread3 = true">                <label><input ng-model="thread3" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Design: Requires an understanding of the maturity and stability of the evolving system design and any related impact on manufacturing readiness.&lt;br&gt;Design includes producibility and maturity.">Design</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread4 = true">                <label><input ng-model="thread4" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Cost and Funding: Requires an analysis of the adequacy of funding to achieve target manufacturing maturity levels. Examines the risk associated with reaching manufacturing cost targets.&lt;br&gt;Cost and Funding includes production cost knowledge (cost modeling), cost analysis, and manufacturing investment budget.">Cost &amp; Funding</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread5 = true">                <label><input ng-model="thread5" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Materials: Requires an analysis of the risks associated with materials (including basic/raw materials, components, semi-finished parts, and subassemblies).&lt;br&gt;&quot;Materials&quot; include analysis of the maturity, availability, supply chain management, and special handling (i.e. government furnished property, shelf life, security, hazardous materials, storage environment, etc.).">Materials</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread6 = true">                <label><input ng-model="thread6" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Process Capability and Control: Requires an analysis of the risks that the manufacturing processes are able to reflect the design intent (repeatability and affordability) of key characteristics.&lt;br&gt;Process Capability and Control includes modeling and simulation (product and process), manufacturing process maturity, and process yields and rates.">Process Capability &amp; Control</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread7 = true">                <label><input ng-model="thread7" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Quality Management: Requires an analysis of the risks and management efforts to control quality, and foster continuous improvement at prime and suppliers.&lt;br&gt;Quality Management includes supplier quality.">Quality Management</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread8 = true">                <label><input ng-model="thread8" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Manufacturing Workforce (Engineering and Production): Requires an assessment of the required skills, availability, and required number of personnel to support the manufacturing effort.&lt;br&gt;Manufacturing Management includes manufacturing planning and scheduling, materials planning, and tooling/special test and inspection equipment.">Manufacturing Workforce</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread9 = true">                <label><input ng-model="thread9" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Facilities: Requires an analysis of the capabilities and capacity of key manufacturing facilities (prime, subcontractor, supplier, vendor, and maintenance/repair).">Facilities</a>                </label>              </div>              <div class="col-sm-4" ng-init="thread10 = true">                <label><input ng-model="thread10" type="checkbox">                  <a style="color: black;" data-toggle="tooltip" title="Manufacturing Management: Requires an analysis of the orchestration of all elements needed to translate the design into an integrated and fielded system (meeting Program goals for affordability and availability).">Manufacturing Management</a>                </label>              </div>          </div>          {{/if}}        <div class="row">            <div id="startButtonWrapper">                <button id="startButton" class="btn btn-primary pull-right" onclick='$("#functionToCall").val("saveStartGetQuestionnairePage")' ng-show='{{#if mraOutputs.outAssessmentPath}}false{{else}}true{{/if}}' ng-click='run()'>Start</button>                <button id="startButton" class="btn btn-primary pull-right" onclick='$("#functionToCall").val("getNextQuestionnairePage")' ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' ng-click='run()'>Continue</button>            </div>        </div>        <div class="continueSection">            <div class="row">                <div class="col-sm-12">                    <h2>Continue Existing Assessment</h2>                </div>            </div>            <div class="row">                <div class="col-sm-6">                    <p>Use this option to start working on an existing assessment. You will be required to import your assessment data.</p>                </div>                <div class="col-sm-6">                    <button class="btn btn-primary" onclick='$("#functionToCall").val("getHelpPage")' ng-click='run()'>Help Importing</button>                    <button class="btn btn-primary" onclick='$("#functionToCall").val("startPageImportAssessment")' ng-click='run()'>{{#if mraOutputs.isRunningInElectron}}Open Assessment{{else}}View Assessments{{/if}}</button>                </div>            </div>        </div>    </form>    <input type='hidden' id='inputPage' value='startPage' />    <input type='hidden' id='teamMemberNames' value='' />    <input type='hidden' id='teamMemberRoles' value='' />    </div>    <script>        $(document).ready(function() {            var startButton = document.getElementById('startButton');            var startButtonWrapper = document.getElementById('startButtonWrapper');            var threadsWrapper = document.getElementById('collapseThreads');            var mainContent = document.getElementById('mainContent');            var addTeamButton = document.getElementsByClassName('addButton')[0];            startButton.disabled = true;            var formFields = getFormFieldsToValidate();            var highlightPerformed = false;            mainContent.onkeyup = function() {                if (highlightPerformed) {                    highlightMissingFields(formFields)                };                enableStartButtonIfValid(startButton, formFields);                updateTeamMembers();                updateThreadSelection(threadsWrapper);            };            mainContent.onclick = function() {                if (highlightPerformed) {                    highlightMissingFields(formFields)                };                enableStartButtonIfValid(startButton, formFields);                updateTeamMembers();                updateThreadSelection(threadsWrapper);            };            startButtonWrapper.onmouseover = function() {                if (startButton.disabled) {                    highlightPerformed = true;                    highlightMissingFields(formFields);                }            };            function setTeamListeners() {              var teamMemberRows = document.getElementsByClassName('memberRow');              for (var i=0; i<teamMemberRows.length; i++) {                teamMemberRows[i].getElementsByClassName('removeButton')[0].onclick = function(ev) {                  ev.currentTarget.parentElement.parentElement.remove();                  updateTeamMembers();                }              }            }            setTimeout(function(){              updateTeamMembers();              updateThreadSelection(threadsWrapper);              setTeamListeners();            },100);        });        function getFormFieldsToValidate() {            var targetDateField = document.getElementById('targetDate');            var targetLevelField = document.getElementById('targetLevel');            var deskbookVersionField = document.getElementById('version');            return [targetDateField, targetLevelField, deskbookVersionField];        }        function enableStartButtonIfValid(button, formFields) {            button.disabled = !validateFields(formFields);        };        function validateFields(formFields) {            var validationResult = returnInvalidIDs(formFields);            return validationResult.length == 0;        };        function returnInvalidIDs(formFields) {            var validationResult = [];            for (var i = 0; i < formFields.length; i++) {                var field = formFields[i];                if (field.id == 'targetLevel' || field.id == 'version') {                    if (isNaN(field.value)) {                        validationResult.push(field);                    }                }                if (field.id == 'targetDate') {                    if (isNaN(Date.parse(field.value))) {                        validationResult.push(field);                    }                }            }            return validationResult;        };        function highlightMissingFields(formFields) {            var invalidFields = returnInvalidIDs(formFields);            for (var i = 0; i < formFields.length; i++) {                formFields[i].style.background = 'initial';            }            for (var j = 0; j < invalidFields.length; j++) {                invalidFields[j].style.background = 'pink';            }        };        function updateTeamMembers() {            var memberNames = $("[id^=mrl_teamMemberName]");            var memberRoles = $("[id^=mrl_teamMemberRole]");            memberNames = memberNames.map(function() {                return $(this).val();            }).get();            memberRoles = memberRoles.map(function() {                return $(this).val();            }).get();            $("#teamMemberNames").val(JSON.stringify(memberNames));            $("#teamMemberRoles").val(JSON.stringify(memberRoles));        };        function updateThreadSelection(threadsWrapper) {            var chosenThreads = document.getElementById('chosenThreads');            var inputs = threadsWrapper.getElementsByTagName('input');            var threadStatus = [];            for (var i = 0; i < inputs.length; i++) {                if (inputs[i].checked) {                    var threadId = parseInt(inputs[i].getAttribute('ng-model').replace('thread', ''));                    threadStatus.push(threadId);                }            }            chosenThreads.value = JSON.stringify(threadStatus);        };    </script><div class='mra_footer'></div><script>  $( document ).ready(function() {    $('.dropdown-toggle').dropdown();  });</script></div>
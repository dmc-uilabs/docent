<div class="container" id="mainContent">
    <h2> Start New Assessment</h2>
    <p class="instruction">Use this option to start a new assessment.</p>
    <form>
        <label>Team Members</label>

        {{#unless mraOutputs.assessment.teamMembers}}
        <div class="memberSection" ng-init='mrl_teamMemberArray=["0"];mrl_numTeamMembers=1'>
        {{/unless}}

        {{#if mraOutputs.assessment.teamMembers}}
        <div class="memberSection" ng-init='mrl_teamMemberArray=[];mrl_numTeamMembers=0'>
        {{/if}}

          {{#each mraOutputs.assessment.teamMembers}}
            <div class="row memberRow">
                <div class="col-sm-6">
                    <input type="text" class="form-control" id='mrl_teamMemberName{{@index}}' value='{{name}}'/>
                </div>
                <div class="col-sm-5">
                    <input type="text" class="form-control" id='mrl_teamMemberRole{{@index}}' value='{{role}}'/>
                </div>
                <!-- <div class="col-sm-2">
                    <button class="removeButton"><span class="glyphicon glyphicon-minus-sign"></span></button>
                </div> -->
            </div>
          {{/each}}

            <div class="row memberRow" ng-repeat='x in mrl_teamMemberArray'>
                <div class="col-sm-6">
                    <input type="text" class="form-control" id='mrl_teamMemberName' placeholder="Member Name" />
                </div>
                <div class="col-sm-5">
                    <input type="text" class="form-control" id='mrl_teamMemberRole' placeholder="Member Role" />
                </div>
                <div class="col-sm-1">
                    <button style="vertical-align: text-top;" class="removeButton" ng-show='$last && mrl_teamMemberArray.length > 1'><span ng-click='mrl_teamMemberArray.splice(-1);mrl_numTeamMembers=mrl_numTeamMembers-1' class="glyphicon glyphicon-minus-sign"></span></button>
                </div>
            </div>


            <button class="addButton" ng-click='mrl_teamMemberArray.push(mrl_numTeamMembers);mrl_numTeamMembers=mrl_numTeamMembers+1'><span class="glyphicon glyphicon-plus-sign"></span>Add Team Member</button>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Scope</label>
                    <textarea id='scope' autofocus=""class="form-control" placeholder="Enter Scope Here" rows=6 style="height:139px;">{{mraOutputs.assessment.scope}}</textarea>


                </div>
                <div class="form-group">
                    <label>Location</label>
                    <input type="text" class="form-control" placeholder="Enter Location" id='location' value='{{mraOutputs.assessment.location}}'/>
                </div>

              {{#unless mraOutputs.isRunningInElectron}}
                <div class='form-group'>
                  <label>Name of Assessment:</label>
                  <span ng-show='assessmentNameRequired'>{{assessmentNameRequired}}</span>
                  <input type='text' class='form-control' id='inAssessmentPath' value='{{mraOutputs.outAssessmentPath}}' {{#if mraOutputs.outAssessmentPath}}readonly{{/if}}></input>
                </div>
              {{/unless}}

            </div>
            <div class="col-sm-6">
              <div class="row">
                <div class="form-group col-sm-6">
                    <label>Target MRL</label>
                    <select class="form-control" id='targetLevel' ng-init='init_level="{{mraOutputs.assessment.targetLevel}}"' ng-model='init_level'>
                      <option value=1>1</option>
                      <option value=2>2</option>
                      <option value=3>3</option>
                      <option value=4>4</option>
                      <option value=5>5</option>
                      <option value=6>6</option>
                      <option value=7>7</option>
                      <option value=8>8</option>
                      <option value=9>9</option>
                      <option value=10>10</option>
                		</select>
                </div>

                <div class="form-group col-sm-6">
                    <label>Level Switching  <a href class="glyphicon glyphicon-question-sign" data-toggle="tooltip" title="When turned on, Docent will present questions above and below your selected level. The goal of this functionality is to find the 'ceiling' or 'floor' of your MRA if you pass or fail your selected level. When turned off, you will only see questions at your selected level."></a></label>
                    <select class="form-control" id='levelSwitching' ng-init='level_switching="{{mraOutputs.assessment.levelSwitching}}"' ng-model='level_switching'>
                      <option value=1>On</option>
                      <option value=0>Off</option>
                		</select>
                </div>
              </div>

                <div class="form-group">
                    <label>Date to Achieve Target MRL</label>
                    <input type="date" class="form-control" id='targetDate' value='{{mraOutputs.assessment.targetDate}}'>
                </div>

                <div class="form-group">
                    <label>Deskbook Version</label>
                    <select class='form-control' id='version'>
                        <option title='v2016' value='1' selected='selected'>2016</option>
                    </select>
                </div>
            </div>
        </div>


        <div class="row">
          <div class="col-xs-12" style="padding-bottom: 10px;">
            <a class="criteria-controls filter-button collapsed" data-toggle="collapse" data-target="#collapseThreads">Choose Threads</a>
            <input type="hidden" id="chosenThreads"></input>
          </div>
        </div>

        <div class="row collapse" id="collapseThreads" style="border-top: 1px solid lightgrey; padding-top: 15px; margin: 0px -5px;">



            {{#each mraOutputs.threads}}
              <div class="col-sm-4">
                <label><input type="checkbox" ng-checked="true" ng-model='thread{{this.[0]}}'><a style="color: black;" data-toggle="tooltip" title="{{ this.[2] }}">{{ this.[1] }}</a></label>
              </div>
            {{/each}}
        </div>

        <div class="row">
          <div id="startButtonWrapper">
            <button id="startButton" class="btn btn-primary pull-right" onclick='$("#functionToCall").val("saveStartGetQuestionnairePage")' ng-show='{{#if mraOutputs.outAssessmentPath}}false{{else}}true{{/if}}' ng-click='run()'>Start</button>
            <button id="startButton" class="btn btn-primary pull-right" onclick='$("#functionToCall").val("getNextQuestionnairePage")' ng-show='{{#if mraOutputs.outAssessmentPath}}true{{else}}false{{/if}}' ng-click='run()'>Continue</button>
          </div>
        </div>
        <div class="continueSection">
            <div class="row">
                <div class="col-sm-12">
                    <h2>Continue Existing Assessment</h2>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <p>Use this option to start working on an existing assessment. You will be required to import your assessment data.</p>
                </div>
                <div class="col-sm-6">
                    <button class="btn btn-primary" onclick='$("#functionToCall").val("getHelpPage")' ng-click='run()' >Help Importing</button>
                    <button class="btn btn-primary" onclick='$("#functionToCall").val("startPageImportAssessment")' ng-click='run()'>{{#if mraOutputs.isRunningInElectron}}Open Assessment{{else}}View Assessments{{/if}}</button>
                </div>
            </div>
        </div>
    </form>
    <input type='hidden' id='inputPage' value='startPage'/>
    <input type='hidden' id='teamMemberNames' value=''/>
    <input type='hidden' id='teamMemberRoles' value=''/>
</div>

<script>
  $(document).ready(function() {
    var startButton = document.getElementById('startButton');
    var startButtonWrapper = document.getElementById('startButtonWrapper');
    var threadsWrapper = document.getElementById('collapseThreads');
    startButton.disabled = true;

    var formFields = getFormFieldsToValidate();

    var highlightPerformed = false;

    document.onkeyup = function() {
      if (highlightPerformed) { highlightMissingFields(formFields) };
      enableStartButtonIfValid(startButton, formFields);
      updateTeamMembers();
      updateThreadSelection(threadsWrapper);
    };

    document.onclick = function() {
      if (highlightPerformed) { highlightMissingFields(formFields) };
      enableStartButtonIfValid(startButton, formFields);
      updateTeamMembers();
      updateThreadSelection(threadsWrapper);
    };

    startButtonWrapper.onmouseover = function(){
      if (startButton.disabled) {
        highlightPerformed = true;
        highlightMissingFields(formFields);
      }
    };

    updateTeamMembers();
    updateThreadSelection(threadsWrapper);


  });

  function getFormFieldsToValidate() {
    var targetDateField = document.getElementById('targetDate');
    var targetLevelField = document.getElementById('targetLevel');
    var deskbookVersionField = document.getElementById('version');

    return [targetDateField, targetLevelField, deskbookVersionField];
  }

  function enableStartButtonIfValid(button, formFields) {
    button.disabled = !validateFields(formFields);
  };

  function validateFields(formFields) {
    var validationResult = returnInvalidIDs(formFields);
    return validationResult.length == 0;
  };

  function returnInvalidIDs(formFields) {
    var validationResult = [];

    for (var i=0; i < formFields.length; i++){
      var field = formFields[i];

      if (field.id == 'targetLevel' || field.id == 'version'){
        if (isNaN(field.value)){
          validationResult.push(field);
        }
      }

      if (field.id == 'targetDate'){
        if (isNaN(Date.parse(field.value))){
          validationResult.push(field);
        }
      }
    }

      return validationResult;
  };

  function highlightMissingFields(formFields) {
    var invalidFields = returnInvalidIDs(formFields);

    for (var i=0; i < formFields.length; i++) {
      formFields[i].style.background = 'initial';
    }

    for (var j=0; j < invalidFields.length; j++) {
      invalidFields[j].style.background = 'pink';
    }
  };

  function updateTeamMembers() {
    var memberNames = $("[id^=mrl_teamMemberName]");
    var memberRoles = $("[id^=mrl_teamMemberRole]");

    memberNames = memberNames.map(function(){
      return $(this).val();
    }).get();

    memberRoles = memberRoles.map(function(){
      return $(this).val();
    }).get();

    $("#teamMemberNames").val(JSON.stringify(memberNames));
    $("#teamMemberRoles").val(JSON.stringify(memberRoles));
  };

  function updateThreadSelection(threadsWrapper) {
    var chosenThreads = document.getElementById('chosenThreads');
    var inputs = threadsWrapper.getElementsByTagName('input');
    var threadStatus=[];
    for (var i=0; i<inputs.length; i++) {
      threadStatus.push(inputs[i].checked);
    }
    chosenThreads.value = threadStatus;
  };

</script>
